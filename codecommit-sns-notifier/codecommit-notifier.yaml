---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  CodeCommit -> SNS -> Lambda -> Slack Channel
  All the resources will share the same name with the stack
Parameters:
  WebHookURL:
    Description: URL for slack webhook
    Type: String
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Description: Associates a service role to lambda function
    DeletionPolicy: Delete
    Properties:
      RoleName: !Sub ${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow # Grants Lambda to assume this role
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        # Attach these two policies to this execution role
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSCodeCommitReadOnly
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    DeletionPolicy: Delete
    Properties:
      Description: Send commit info to Slack channel
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.6
      Timeout: 3
      FunctionName: !Sub ${AWS::StackName}
      Handler: index.lambda_handler
      Environment:
        Variables:
          WebHookURL: !Ref WebHookURL
      Code: 
        ZipFile: |
          def lambda_handler(event, context):
            import os

            my_url = os.environ['WebHookURL']
            (region, commitID, repoName) = parse_input(event)

            channel = SlackChannel(my_url)
            channel.send_commit_info(region, commitID, repoName)

          def parse_input(event):
            import json

            json_string = event['Records'][0]['Sns']['Message']
            message = json.loads(json_string)
            stub = message['Records'][0]
            # extracts three pieces of information
            region = stub['awsRegion']
            commitID = stub['codecommit']['references'][0]['commit']
            repoName = stub['eventSourceARN'].split(':')[-1]

            return (region, commitID, repoName)

          class SlackChannel:
            def __init__(self, webhook_url):
              self.webhook_url = webhook_url

            def send_commit_info(self, region, commitID, repoName):
              import boto3
              import json

              client = boto3.client('codecommit')
              response = client.get_commit(repositoryName=repoName, commitId=commitID)
              # extract info about the commit
              subject = response['commit']['message'].splitlines()[0]
              author = response['commit']['committer']['name']
              # extract commit link
              repo_url = "https://{}.console.aws.amazon.com/codecommit/home?region={}#/repository/{}".format(region, region, repoName)
              commit_url = "{}/commit/{}".format(repo_url, commitID)
              commit_link = "<{}|{}>".format(commit_url, commitID[:7])
              repo_link = "<{}|{}>".format(repo_url, repoName)
              # generate the message payload
              msg = {}
              msg["text"] = "*{}* pushes `{}` to {}\n>{}".format(author, commit_link, repo_link, subject)
              msg["mrkdwn"] = True
              payload = json.dumps(msg).encode("utf-8")
              self._send(payload)

            def _send(self, attachment):
              import logging
              import urllib.request
              import urllib.error
              import os

              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              logger.info(attachment)

              header = {'Content-Type': 'application/json'}
              req = urllib.request.Request(self.webhook_url, data=attachment, method="POST", headers=header)
              try:
                with urllib.request.urlopen(req) as response:
                  body = response.read().decode("utf-8")
                  logger.info(body)
              except urllib.error.HTTPError as e:
                logger.error("Request failed: {} {}".format(e.code, e.reason))
              except urllib.URLError as e:
                logger.error("Server connection failed: {}".format(e.reason))

  SNSTopic:
    Type: AWS::SNS::Topic
    Description: CodeCommit publishes message to this channel and Lambda subscribes to it
    DependsOn: LambdaFunction
    DeletionPolicy: Delete
    Properties:
      DisplayName: !Sub ${AWS::StackName}
      TopicName: !Sub ${AWS::StackName}
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
  SNSPermission:
    Type: AWS::Lambda::Permission
    Description: Grants SNS the permission to invoke the above Lambda
    DependsOn: SNSTopic
    DeletionPolicy: Delete
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNSTopic
Outputs:
  LambdaFunction:
    Description: Name of the generated Lambda function
    Value: !Ref LambdaFunction
  SNSTopic:
    Description: Name of the generated SNS topic
    Value: !Ref SNSTopic
...
